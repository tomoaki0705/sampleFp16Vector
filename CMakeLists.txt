cmake_minimum_required(VERSION 2.8)

project(sampleFp16)

message(STATUS ${CMAKE_SYSTEM_PROCESSOR})
if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm.*|ARM.*)")
	set(ARM 1)
elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "^(aarch64)")
	set(AARCH64 1)
else ()
	set(X86 1)
endif()

if (X86)
	message(STATUS "detected x86 architecture")
	set (FEATURESUPPORT floatMul.cpp featureSupportX86.cpp)
	if (UNIX)
		set(CMAKE_CXX_FLAGS "-mf16c")
	endif()
elseif (AARCH64)
	message(STATUS "detected ARM 64bit architecture")
	set (FEATURESUPPORT floatMul.cpp featureSupportARM.cpp)
	if (UNIX)
		set(CMAKE_CXX_FLAGS "-flax-vector-conversions")
	endif()
elseif (ARM)
	message(STATUS "detected ARM architecture")
	set (FEATURESUPPORT floatMul.cpp featureSupportARM.cpp)
	if (UNIX)
		set(CMAKE_CXX_FLAGS "-mfp16-format=ieee -mfpu=neon-fp16 -flax-vector-conversions")
	endif()
endif()

find_package(OpenCV)
find_package(CUDA)

add_executable(verifyMultiply verifyMul.cpp ${FEATURESUPPORT})
add_executable(sampleFp16 main.cpp ${FEATURESUPPORT})

if(OpenCV_FOUND)
	include_directories(${OpenCV_INCLUDE_DIRS})

	add_executable(floatImage2HalfImage converter.cpp ${FEATURESUPPORT})
	target_link_libraries(floatImage2HalfImage ${OpenCV_LIBS})
	if(CUDA_FOUND)
		cuda_add_executable(demo demoMain.cpp sampleFp16.cu ${FEATURESUPPORT})
		link_directories(${CUDA_CUDART_LIBRARY})
	add_definitions(-DHAVE_CUDA)
	else(CUDA_NOT_FOUND)
		add_executable(demo demoMain.cpp ${FEATURESUPPORT})
	endif(CUDA_FOUND)
	target_link_libraries(demo ${OpenCV_LIBS})

	set(DATA_DIR ${CMAKE_SOURCE_DIR}/data)
	set(PRECOMPUTED1 lenaMask)
	set(PRECOMPUTED2 defaultMask)
	set(IMAGE_TYPE png)
	if (WIN32)
		string(REGEX REPLACE "/" "\\\\" DATA_FLOAT1 ${DATA_DIR}/${PRECOMPUTED1}Float.${IMAGE_TYPE})
		string(REGEX REPLACE "/" "\\\\" DATA_FLOAT2 ${DATA_DIR}/${PRECOMPUTED2}Float.${IMAGE_TYPE})
		string(REGEX REPLACE "/" "\\\\" DATA_HALF1  ${DATA_DIR}/${PRECOMPUTED1}Half.${IMAGE_TYPE})
		string(REGEX REPLACE "/" "\\\\" DATA_HALF2  ${DATA_DIR}/${PRECOMPUTED2}Half.${IMAGE_TYPE})
		string(REGEX REPLACE "/" "\\\\" DATA_GRAY1  ${DATA_DIR}/${PRECOMPUTED1}Gray.${IMAGE_TYPE})
		string(REGEX REPLACE "/" "\\\\" DATA_GRAY2  ${DATA_DIR}/${PRECOMPUTED2}Gray.${IMAGE_TYPE})
		string(REGEX REPLACE "/" "\\\\" TARGET_BIN1 ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CFG_INTDIR})
		string(REGEX REPLACE "/" "\\\\" TARGET_BIN2 ${CMAKE_CURRENT_BINARY_DIR})
		add_custom_command(TARGET demo COMMAND copy ${DATA_FLOAT1} ${TARGET_BIN1}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_FLOAT2} ${TARGET_BIN1}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_HALF1}  ${TARGET_BIN1}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_HALF2}  ${TARGET_BIN1}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_GRAY1}  ${TARGET_BIN1}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_GRAY2}  ${TARGET_BIN1}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_FLOAT1} ${TARGET_BIN2}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_FLOAT2} ${TARGET_BIN2}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_HALF1}  ${TARGET_BIN2}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_HALF2}  ${TARGET_BIN2}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_GRAY1}  ${TARGET_BIN2}) 
		add_custom_command(TARGET demo COMMAND copy ${DATA_GRAY2}  ${TARGET_BIN2}) 
	elseif (UNIX)
		set(DATA_FLOAT1 ${DATA_DIR}/${PRECOMPUTED1}Float.${IMAGE_TYPE})
		set(DATA_FLOAT2 ${DATA_DIR}/${PRECOMPUTED2}Float.${IMAGE_TYPE})
		set(DATA_HALF1  ${DATA_DIR}/${PRECOMPUTED1}Half.${IMAGE_TYPE})
		set(DATA_HALF2  ${DATA_DIR}/${PRECOMPUTED2}Half.${IMAGE_TYPE})
		set(DATA_GRAY1  ${DATA_DIR}/${PRECOMPUTED1}Gray.${IMAGE_TYPE})
		set(DATA_GRAY2  ${DATA_DIR}/${PRECOMPUTED2}Gray.${IMAGE_TYPE})
		set(TARGET_BIN1 ${CMAKE_CURRENT_BINARY_DIR})
		add_custom_command(TARGET demo COMMAND cp -p ${DATA_FLOAT1} ${DATA_FLOAT2} ${DATA_HALF1} ${DATA_HALF2} ${DATA_GRAY1} ${DATA_GRAY2} ${TARGET_BIN1})
	endif (WIN32)
endif(OpenCV_FOUND)

